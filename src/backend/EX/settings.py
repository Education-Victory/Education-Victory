"""
Django settings for EX project.

Generated by 'django-admin startproject' using Django 4.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import ENV
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DEFAULT_DIR = Path(__file__).resolve().parent
STATIC_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@s=_aoq!k!h-@b^%t!+zoxo4fs@e+ccr^lld4fd9+3oxdg^!^!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'public.apps.PublicConfig',
    'question.apps.QuestionConfig',
    'common.apps.CommonConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.openid',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = 'common.User'

QUESTION_ABILITY_MODEL = 'question.Ability'

ROOT_URLCONF = 'EX.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(DEFAULT_DIR, 'templates')], # import the templates folder
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'EX.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    STATIC_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-allauth setup

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    },
    'github': {
        'SCOPE': [
            'user',
            'repo',
            'read:org',
        ],
    }
}

# Email
EMAIL_BACKEND = ENV.EMAIL_BACKEND
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

# Enhance
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True

# Other
LOGIN_REDIRECT_URL = 'home'
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'

# Ability Constants
VALID_ABILITY_KEYS = {
    "Array": "Array",
    "String": "String",
    "Hash Table": "Hash Table",
    "Tree": "Tree",
    "Matrix": "Matrix",
    "Binary Tree": "Binary Tree",
    "Heap (Priority Queue)": "Heap (Priority Queue)",
    "Stack": "Stack",
    "Graph": "Graph",
    "Linked List": "Linked List",
    "Ordered Set": "Ordered Set",
    "Monotonic Stack": "Monotonic Stack",
    "Trie": "Trie",
    "Binary Search Tree": "Binary Search Tree",
    "Queue": "Queue",
    "Segment Tree": "Segment Tree",
    "Binary Indexed Tree": "Binary Indexed Tree",
    "Monotonic Queue": "Monotonic Queue",
    "Doubly-Linked List": "Doubly-Linked List",
    "Suffix Array": "Suffix Array",
    "Minimum Spanning Tree": "Minimum Spanning Tree",
    "Dynamic Programming": "Dynamic Programming",
    "Greedy": "Greedy",
    "Depth-First Search": "Depth-First Search",
    "Binary Search": "Binary Search",
    "Breadth-First Search": "Breadth-First Search",
    "Backtracking": "Backtracking",
    "Union Find": "Union Find",
    "Divide and Conquer": "Divide and Conquer",
    "Topological Sort": "Topological Sort",
    "Shortest Path": "Shortest Path",
    "String Matching": "String Matching",
    "Merge Sort": "Merge Sort",
    "Quickselect": "Quickselect",
    "Bucket Sort": "Bucket Sort",
    "Counting Sort": "Counting Sort",
    "Line Sweep": "Line Sweep",
    "Radix Sort": "Radix Sort",
    "Strongly Connected Component": "Strongly Connected Component",
    "Biconnected Component": "Biconnected Component",
    "Cycle Detection": "Cycle Detection",
    "Bipartite Graph": "Bipartite Graph",
    "Sorting": "Sorting",
    "Two Pointers": "Two Pointers",
    "Bit Manipulation": "Bit Manipulation",
    "Prefix Sum": "Prefix Sum",
    "Counting": "Counting",
    "Sliding Window": "Sliding Window",
    "Enumeration": "Enumeration",
    "Recursion": "Recursion",
    "Bitmask": "Bitmask",
    "Memoization": "Memoization",
    "Hash Function": "Hash Function",
    "Data Stream": "Data Stream",
    "Rolling Hash": "Rolling Hash",
    "Randomized": "Randomized",
    "Iterator": "Iterator",
    "Concurrency": "Concurrency",
    "Rejection Sampling": "Rejection Sampling",
    "Infix to Postfix": "Infix to Postfix",
    "Brackets Match": "Brackets Match",
    "Stock Span": "Stock Span",
    "Expression Evaluation": "Expression Evaluation",
    "Math": "Math",
    "Design": "Design",
    "Simulation": "Simulation",
    "Number Theory": "Number Theory",
    "Geometry": "Geometry",
    "Game Theory": "Game Theory",
    "Combinatorics": "Combinatorics",
    "Interactive": "Interactive",
    "Brainteaser": "Brainteaser",
    "Probability and Statistics": "Probability and Statistics",
    "Reservoir Sampling": "Reservoir Sampling",
    "Eulerian Circuit": "Eulerian Circuit",
}

